# Generated from Ensamblador.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
from typing import TextIO


def serializedATN():
    return [
        4,0,22,277,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
        2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,
        7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,10,3,10,152,8,10,
        1,11,1,11,1,11,1,11,1,11,1,11,1,11,3,11,161,8,11,1,12,4,12,164,8,
        12,11,12,12,12,165,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,
        3,13,177,8,13,1,14,1,14,5,14,181,8,14,10,14,12,14,184,9,14,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,1,15,3,15,222,8,15,1,16,
        1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,1,16,4,16,235,8,16,
        11,16,12,16,236,1,17,1,17,1,18,4,18,242,8,18,11,18,12,18,243,1,18,
        1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,
        1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,
        272,8,20,1,20,1,20,1,21,1,21,0,0,22,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,1,0,26,2,0,89,89,121,121,2,0,71,71,103,103,
        2,0,85,85,117,117,2,0,65,65,97,97,2,0,82,82,114,114,2,0,68,68,100,
        100,2,0,69,69,101,101,2,0,78,78,110,110,2,0,73,73,105,105,2,0,83,
        83,115,115,2,0,84,84,116,116,2,0,79,79,111,111,2,0,77,77,109,109,
        2,0,86,86,118,118,2,0,67,67,99,99,2,0,80,80,112,112,2,0,76,76,108,
        108,1,0,48,57,2,0,88,88,120,120,2,0,66,66,98,98,2,0,65,68,97,100,
        2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,2,0,81,81,113,113,
        3,0,48,57,65,90,97,122,2,0,9,9,32,32,303,0,1,1,0,0,0,0,3,1,0,0,0,
        0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,
        15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,
        25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
        35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,1,
        45,1,0,0,0,3,47,1,0,0,0,5,55,1,0,0,0,7,58,1,0,0,0,9,67,1,0,0,0,11,
        73,1,0,0,0,13,75,1,0,0,0,15,84,1,0,0,0,17,88,1,0,0,0,19,91,1,0,0,
        0,21,151,1,0,0,0,23,160,1,0,0,0,25,163,1,0,0,0,27,176,1,0,0,0,29,
        178,1,0,0,0,31,221,1,0,0,0,33,223,1,0,0,0,35,238,1,0,0,0,37,241,
        1,0,0,0,39,247,1,0,0,0,41,271,1,0,0,0,43,275,1,0,0,0,45,46,7,0,0,
        0,46,2,1,0,0,0,47,48,7,1,0,0,48,49,7,2,0,0,49,50,7,3,0,0,50,51,7,
        4,0,0,51,52,7,5,0,0,52,53,7,3,0,0,53,54,7,4,0,0,54,4,1,0,0,0,55,
        56,7,6,0,0,56,57,7,7,0,0,57,6,1,0,0,0,58,59,7,4,0,0,59,60,7,6,0,
        0,60,61,7,1,0,0,61,62,7,8,0,0,62,63,7,9,0,0,63,64,7,10,0,0,64,65,
        7,4,0,0,65,66,7,11,0,0,66,8,1,0,0,0,67,68,7,12,0,0,68,69,7,11,0,
        0,69,70,7,13,0,0,70,71,7,6,0,0,71,72,7,4,0,0,72,10,1,0,0,0,73,74,
        7,3,0,0,74,12,1,0,0,0,75,76,7,14,0,0,76,77,7,11,0,0,77,78,7,12,0,
        0,78,79,7,15,0,0,79,80,7,3,0,0,80,81,7,4,0,0,81,82,7,3,0,0,82,83,
        7,4,0,0,83,14,1,0,0,0,84,85,7,14,0,0,85,86,7,11,0,0,86,87,7,7,0,
        0,87,16,1,0,0,0,88,89,7,9,0,0,89,90,7,8,0,0,90,18,1,0,0,0,91,92,
        7,8,0,0,92,93,7,4,0,0,93,94,5,95,0,0,94,95,7,3,0,0,95,20,1,0,0,0,
        96,97,7,9,0,0,97,98,7,2,0,0,98,99,7,12,0,0,99,100,7,3,0,0,100,152,
        7,4,0,0,101,102,7,4,0,0,102,103,7,6,0,0,103,104,7,9,0,0,104,105,
        7,10,0,0,105,106,7,3,0,0,106,152,7,4,0,0,107,108,7,12,0,0,108,109,
        7,2,0,0,109,110,7,16,0,0,110,111,7,10,0,0,111,112,7,8,0,0,112,113,
        7,15,0,0,113,114,7,16,0,0,114,115,7,8,0,0,115,116,7,14,0,0,116,117,
        7,3,0,0,117,152,7,4,0,0,118,119,7,5,0,0,119,120,7,8,0,0,120,121,
        7,13,0,0,121,122,7,8,0,0,122,123,7,5,0,0,123,124,7,8,0,0,124,152,
        7,4,0,0,125,126,7,12,0,0,126,127,7,11,0,0,127,128,7,13,0,0,128,129,
        7,6,0,0,129,152,7,4,0,0,130,131,7,14,0,0,131,132,7,11,0,0,132,133,
        7,12,0,0,133,134,7,15,0,0,134,135,7,3,0,0,135,136,7,4,0,0,136,137,
        7,3,0,0,137,152,7,4,0,0,138,139,7,8,0,0,139,140,7,4,0,0,140,141,
        5,95,0,0,141,152,7,3,0,0,142,143,7,9,0,0,143,152,7,8,0,0,144,145,
        7,1,0,0,145,146,7,2,0,0,146,147,7,3,0,0,147,148,7,4,0,0,148,149,
        7,5,0,0,149,150,7,3,0,0,150,152,7,4,0,0,151,96,1,0,0,0,151,101,1,
        0,0,0,151,107,1,0,0,0,151,118,1,0,0,0,151,125,1,0,0,0,151,130,1,
        0,0,0,151,138,1,0,0,0,151,142,1,0,0,0,151,144,1,0,0,0,152,22,1,0,
        0,0,153,161,7,0,0,0,154,155,7,5,0,0,155,161,7,6,0,0,156,161,7,3,
        0,0,157,158,7,14,0,0,158,159,7,11,0,0,159,161,7,7,0,0,160,153,1,
        0,0,0,160,154,1,0,0,0,160,156,1,0,0,0,160,157,1,0,0,0,161,24,1,0,
        0,0,162,164,7,17,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,1,0,
        0,0,165,166,1,0,0,0,166,26,1,0,0,0,167,168,7,3,0,0,168,177,7,18,
        0,0,169,170,7,19,0,0,170,177,7,18,0,0,171,172,7,14,0,0,172,177,7,
        18,0,0,173,174,7,5,0,0,174,177,7,18,0,0,175,177,7,20,0,0,176,167,
        1,0,0,0,176,169,1,0,0,0,176,171,1,0,0,0,176,173,1,0,0,0,176,175,
        1,0,0,0,177,28,1,0,0,0,178,182,7,21,0,0,179,181,7,22,0,0,180,179,
        1,0,0,0,181,184,1,0,0,0,182,180,1,0,0,0,182,183,1,0,0,0,183,30,1,
        0,0,0,184,182,1,0,0,0,185,186,7,12,0,0,186,187,7,3,0,0,187,188,7,
        0,0,0,188,189,7,11,0,0,189,190,7,4,0,0,190,191,5,95,0,0,191,192,
        7,23,0,0,192,193,7,2,0,0,193,222,7,6,0,0,194,195,7,12,0,0,195,196,
        7,6,0,0,196,197,7,7,0,0,197,198,7,11,0,0,198,199,7,4,0,0,199,200,
        5,95,0,0,200,201,7,23,0,0,201,202,7,2,0,0,202,222,7,6,0,0,203,204,
        7,8,0,0,204,205,7,1,0,0,205,206,7,2,0,0,206,207,7,3,0,0,207,208,
        7,16,0,0,208,209,5,95,0,0,209,222,7,3,0,0,210,211,7,5,0,0,211,212,
        7,8,0,0,212,213,7,9,0,0,213,214,7,10,0,0,214,215,7,8,0,0,215,216,
        7,7,0,0,216,217,7,10,0,0,217,218,7,11,0,0,218,219,5,95,0,0,219,220,
        7,5,0,0,220,222,7,6,0,0,221,185,1,0,0,0,221,194,1,0,0,0,221,203,
        1,0,0,0,221,210,1,0,0,0,222,32,1,0,0,0,223,224,7,6,0,0,224,225,7,
        10,0,0,225,226,7,8,0,0,226,227,7,23,0,0,227,228,7,2,0,0,228,229,
        7,6,0,0,229,230,7,10,0,0,230,231,7,3,0,0,231,232,5,95,0,0,232,234,
        1,0,0,0,233,235,7,24,0,0,234,233,1,0,0,0,235,236,1,0,0,0,236,234,
        1,0,0,0,236,237,1,0,0,0,237,34,1,0,0,0,238,239,5,44,0,0,239,36,1,
        0,0,0,240,242,7,25,0,0,241,240,1,0,0,0,242,243,1,0,0,0,243,241,1,
        0,0,0,243,244,1,0,0,0,244,245,1,0,0,0,245,246,6,18,0,0,246,38,1,
        0,0,0,247,248,5,10,0,0,248,249,1,0,0,0,249,250,6,19,0,0,250,40,1,
        0,0,0,251,252,7,6,0,0,252,272,7,16,0,0,253,254,7,16,0,0,254,272,
        7,3,0,0,255,256,7,16,0,0,256,257,7,11,0,0,257,272,7,9,0,0,258,259,
        7,16,0,0,259,260,7,3,0,0,260,272,7,9,0,0,261,262,7,6,0,0,262,272,
        7,7,0,0,263,264,7,4,0,0,264,265,7,6,0,0,265,266,7,1,0,0,266,267,
        7,8,0,0,267,268,7,9,0,0,268,269,7,10,0,0,269,270,7,4,0,0,270,272,
        7,11,0,0,271,251,1,0,0,0,271,253,1,0,0,0,271,255,1,0,0,0,271,258,
        1,0,0,0,271,261,1,0,0,0,271,263,1,0,0,0,272,273,1,0,0,0,273,274,
        6,20,0,0,274,42,1,0,0,0,275,276,9,0,0,0,276,44,1,0,0,0,10,0,151,
        160,165,176,182,221,236,243,271,1,6,0,0
    ]

class EnsambladorLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    OPERACION = 11
    OPERADOR = 12
    NUMERO = 13
    REGISTRO = 14
    VARIABLE = 15
    COMPARADOR = 16
    ETIQUETA = 17
    SEPARADOR = 18
    ESPACIO = 19
    SALTO_LINEA = 20
    IGNORAR = 21
    ERROR = 22

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'y'", "'guardar'", "'en'", "'registro'", "'mover'", "'a'", 
            "'comparar'", "'con'", "'si'", "'ir_a'", "','", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "OPERACION", "OPERADOR", "NUMERO", "REGISTRO", "VARIABLE", "COMPARADOR", 
            "ETIQUETA", "SEPARADOR", "ESPACIO", "SALTO_LINEA", "IGNORAR", 
            "ERROR" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "OPERACION", "OPERADOR", "NUMERO", 
                  "REGISTRO", "VARIABLE", "COMPARADOR", "ETIQUETA", "SEPARADOR", 
                  "ESPACIO", "SALTO_LINEA", "IGNORAR", "ERROR" ]

    grammarFileName = "Ensamblador.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


